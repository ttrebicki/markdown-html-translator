{"version":3,"sources":["features/editor/editorSlice.js","features/editor/Editor.js","App.js","app/store.js","serviceWorker.js","index.js","features/editor/Editor.module.css"],"names":["sanitizer","DOMPurify","sanitize","editorSlice","createSlice","name","initialState","value","reducers","handleChange","state","action","payload","actions","selectVal","editor","hljs","registerLanguage","javascript","Editor","val","useSelector","dispatch","useDispatch","marked","setOptions","highlight","code","language","validLanguage","getLanguage","gfm","breaks","xhtml","className","styles","editor_wrapper","preview","id","dangerouslySetInnerHTML","__html","markedVal","textfield","onChange","event","target","App","configureStore","reducer","editorReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"+NAGMA,E,OAAYC,EAAUC,SAEfC,EAAcC,YAAY,CACrCC,KAAM,SACNC,aAAc,CACZC,MACA,4qCAEFC,SAAU,CACRC,aAAc,SAACC,EAAOC,GACpBD,EAAMH,MAAQP,EAAUW,EAAOC,aAKrBH,EAAkBN,EAAYU,QAA9BJ,aAEHK,EAAY,SAAAJ,GAAK,OAAIA,EAAMK,OAAOR,OAEhCJ,IAAf,Q,wECdAa,IAAKC,iBAAiB,aAAcC,KAG7B,IAAMC,EAAS,WACpB,IAAMC,EAAMC,YAAYP,GAClBQ,EAAWC,cAKjBC,IAAOC,WAAW,CAChBC,UAAW,SAASC,EAAMC,GACxB,IAAMC,EAAgBb,IAAKc,YAAYF,GAAYA,EAAW,aAC9D,OAAOZ,IAAKU,UAAUG,EAAeF,GAAMpB,OAE7CwB,KAAK,EACLC,QAAQ,EACRC,OAAO,IAOT,OACE,sBAAKC,UAAWC,IAAOC,eAAvB,UACE,qBAAKF,UAAWC,IAAOE,QAASC,GAAG,UAAUC,wBAAyB,CAACC,OANzD,SAACpB,GACjB,OAAQI,IAAOJ,GAKkEqB,CAAUrB,MACzF,0BAAUc,UAAWC,IAAOO,UAAWJ,GAAG,SAAS/B,MAAOa,EAAKuB,SArB7C,SAAAC,GACpBtB,EAASb,EAAamC,EAAMC,OAAOtC,e,MCDxBuC,MARf,WACE,OACE,qBAAKZ,UAAU,MAAf,SACE,cAAC,EAAD,OCNSa,cAAe,CAC5BC,QAAS,CACPjC,OAAQkC,KCOQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,kBEpInBC,EAAOC,QAAU,CAAC,eAAiB,+BAA+B,UAAY,0BAA0B,QAAU,2B","file":"static/js/main.74305742.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport DOMPurify from 'dompurify';\n\nconst sanitizer = DOMPurify.sanitize;\n\nexport const editorSlice = createSlice({\n  name: 'editor',\n  initialState: {\n    value:\n    '# HTML Markdown Preview Sandbox\\n\\n## This is a sub-heading...\\n### And here\\'s some other cool stuff:\\n\\nHeres some code, `<div></div>`, between 2 backticks.\\n\\n```\\n// this is multi-line code:\\n\\nfunction anotherExample(firstLine, lastLine) {\\n  if (firstLine == \\'```\\' \\&\\& lastLine == \\'```\\') {\\n    return multiLineCode;\\n  }\\n}\\n```\\n\\nYou can also make text **bold**... whoa!\\nOr _italic_.\\nOr... wait for it... **_both!_**\\nAnd feel free to go crazy ~~crossing stuff out~~.\\n\\nThere\\'s also [links](https://www.freecodecamp.com), and\\n> Block Quotes!\\n\\nAnd if you want to get really crazy, even tables:\\n\\nWild Header | Crazy Header | Another Header?\\n------------ | ------------- | -------------\\nYour content can | be here, and it | can be here....\\nAnd here. | Okay. | I think we get it.\\n\\n- And of course there are lists.\\n  - Some are bulleted.\\n     - With different indentation levels.\\n        - That look like this.\\n\\n\\n1. And there are numbered lists too.\\n1. Use just 1s if you want!\\n1. And last but not least, let\\'s not forget embedded images:\\n\\n![https://www.are.na/block/6058397](https://d2w9rnfcy7mm78.cloudfront.net/6058397/large_ce6ca279408e2b773ed72bda7f6cf097.jpg)\\n',\n  },\n  reducers: {\n    handleChange: (state, action) => {\n      state.value = sanitizer(action.payload);\n    }\n  },\n});\n\nexport const {  handleChange  } = editorSlice.actions;\n\nexport const selectVal = state => state.editor.value;\n\nexport default editorSlice.reducer;\n","import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectVal, handleChange } from './editorSlice';\nimport styles from './Editor.module.css';\nimport marked from 'marked';\nimport hljs from 'highlight.js/lib/core';\nimport javascript from 'highlight.js/lib/languages/javascript';\nimport 'highlight.js/styles/github.css';\nhljs.registerLanguage('javascript', javascript);\n\n\nexport const Editor = () => {\n  const val = useSelector(selectVal);\n  const dispatch = useDispatch();\n  const changeHandler = event => {\n    dispatch(handleChange(event.target.value));\n  }\n\n  marked.setOptions({\n    highlight: function(code, language) {\n      const validLanguage = hljs.getLanguage(language) ? language : 'javascript';\n      return hljs.highlight(validLanguage, code).value;\n    },\n    gfm: true,\n    breaks: true,\n    xhtml: true\n  });\n  \n  const markedVal = (val) => {\n    return (marked(val));\n  }\n\n  return (\n    <div className={styles.editor_wrapper}>\n      <div className={styles.preview} id=\"preview\" dangerouslySetInnerHTML={{__html: markedVal(val)}}></div>\n      <textarea className={styles.textfield} id=\"editor\" value={val} onChange={changeHandler}></textarea>\n    </div>\n  );\n}\n","import React, { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Editor } from './features/editor/Editor';\r\nimport './App.css';\r\nimport { handleChange } from './features/editor/editorSlice';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Editor />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport editorReducer from '../features/editor/editorSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    editor: editorReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"editor_wrapper\":\"Editor_editor_wrapper__1UA3k\",\"textfield\":\"Editor_textfield__3Kaw7\",\"preview\":\"Editor_preview__1o4vc\"};"],"sourceRoot":""}